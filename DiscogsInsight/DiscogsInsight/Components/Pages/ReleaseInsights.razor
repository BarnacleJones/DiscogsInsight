@page "/releaseInsights"
@using DiscogsInsight.View.Services.Collection
@using DiscogsInsight.View.Services.Insights
@using DiscogsInsight.View.Services.Notifications
@using DiscogsInsight.View.Services.Releases
@using DiscogsInsight.View.Services.Tracks
@using DiscogsInsight.ViewModels
@using DiscogsInsight.ViewModels.Insights
@using DiscogsInsight.ViewModels.Results
@inject ReleaseInsightsViewService ReleaseInsightsViewService
@inject UserNotificationService UserNotificationService
@inject NavigationManager NavigationManager

        
@if (_releaseInsightsStats != null)
{
    <MudStack AlignItems="MudBlazor.AlignItems.Center" Elevation="0">
        <MudText Typo="Typo.h5">Release Insights</MudText>
        <MudSpacer />
        <MudList>
            <MudListItem>
                <MudText Typo="Typo.body2">Average Release Pressed Year</MudText>
                    <MudSpacer />
                <MudText Typo="Typo.body1">@_releaseInsightsStats.AverageReleasePressingYear</MudText>
            </MudListItem>
            <MudListItem>
                <MudText Typo="Typo.body2">Earliest Release Year</MudText>
                    <MudSpacer />
                <MudText Typo="Typo.body1">@_releaseInsightsStats.EarliestReleaseYear</MudText>
            </MudListItem>  
        </MudList>
        <MudSpacer />
        <MudChart ChartType="ChartType.Line" ChartSeries="@ReleasesOverTimeSeries" @bind-SelectedIndex="Index" XAxisLabels="@releasesOverTimeGraphLabels" Width="100%" Height="350px" ChartOptions="@Options" />
        <MudSpacer />
        <MudChart ChartType="ChartType.Pie" InputData="@releasesPressedCountryValues" @bind-SelectedIndex="Index" InputLabels="@releasesPressedCountryLabels" Width="300px" Height="300px" />
        <MudText Typo="Typo.body2">*Not including "Unknown"</MudText>
    </MudStack>
}
else
{
    <LoadingComponent />
}

@code{
    private ReleaseInsightsStatsModel _releaseInsightsStats;
    private List<ChartSeries> ReleasesOverTimeSeries;
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public ChartOptions Options = new ChartOptions();
    public string[] releasesOverTimeGraphLabels;
    public double[] releasesPressedCountryValues;
    public string[] releasesPressedCountryLabels;


    protected override async Task OnInitializedAsync()
    {        
        HandleStatisticsResult(await ReleaseInsightsViewService.GetReleaseStatistics());
        PassDataToReleasesOverTime();
        PassDataToPressedCountriesPieChart();
    }

    private async void HandleStatisticsResult(ViewResult<ReleaseInsightsStatsModel> result)
    {
        if (result.Success)
            _releaseInsightsStats = result.Data;
        else
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
    }

    private void PassDataToReleasesOverTime()
    {
        var series = new double[_releaseInsightsStats.ReleasesOverTimeLineChartSeriesData.Count];
        var xAxisLabels = new string[_releaseInsightsStats.ReleasesOverTimeLineChartSeriesData.Count];

        for (int i = 0; i < series.Length; i++)
        {
            series[i] = _releaseInsightsStats.ReleasesOverTimeLineChartSeriesData[i].releasesThatMonth;
            xAxisLabels[i] = _releaseInsightsStats.ReleasesOverTimeLineChartSeriesData[i].XAxisLabelMonthAndYear;
        }

        ReleasesOverTimeSeries = new List<ChartSeries>()
        {
            new ChartSeries(){ Name="Releases added to collection over time", Data = series }
        };

        releasesOverTimeGraphLabels = xAxisLabels;
    }

    private void PassDataToPressedCountriesPieChart()
    {
        releasesPressedCountryValues = _releaseInsightsStats.ReleasesPressedCountryValues;
        releasesPressedCountryLabels = _releaseInsightsStats.ReleasesPressedCountryLabels;
    }
}