@page "/untaggedcollectionGrid"
@using DiscogsInsight.ViewModels.Collection
@using DiscogsInsight.View.Services.Collection
@using DiscogsInsight.ViewModels.EntityViewModels
@using DiscogsInsight.View.Services.Notifications
@using DiscogsInsight.ViewModels.Results
@inject UserNotificationService UserNotificationService
@inject NavigationManager NavigationManager
@inject CollectionViewService CollectionViewService

@if (_collectionViewModel == null)
{
    <LoadingComponent />
}
else{  
    <MudText Typo="Typo.h6">Collection Missing API Data - @_collectionViewModel.Releases.Count() to go</MudText>
    <MudText Typo="Typo.subtitle2" Class="px-4 mud-text-secondary">Navigate to the release to fetch and save API data, then it will dissapear from this list</MudText>

    <MudDataGrid T="@ReleaseViewModel" MultiSelection="true" Items="@_collectionViewModel.Releases?.OrderBy(x => x.Artist)" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                 Hideable="true" Groupable="true" GroupExpanded="false" Class="custom-mud-datagrid" RowsPerPage="50" FixedHeader="true">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>                     
            <PropertyColumn Property="x => x.Title" Title="Album:   " SortBy="@_sortBy">
                <CellTemplate>
                    <MudText onclick="@(() => GoToRelease(context.Item.DiscogsReleaseId))">@context.Item.Title</MudText>
                </CellTemplate>                
            </PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="ReleaseViewModel" />
        </PagerContent>
    </MudDataGrid>
}


@code {
    public static DiscogsCollectionViewModel? _collectionViewModel;
    private IEnumerable<ReleaseViewModel> Elements = new List<ReleaseViewModel>();
    private string _searchString;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HandleResult(await CollectionViewService.GetUntaggedCollection());
        }
        catch (Exception ex)
        {
            await UserNotificationService.DisplayNotification("Error", $"{ex.Message}", "OK", "Cancel");
        }
    }

    void GoToArtist(int? discogsArtistId)
    {
        NavigationManager.NavigateTo("artist/" + discogsArtistId);
    }

    void GoToRelease(int? releaseId)
    {
        NavigationManager.NavigateTo($"release/{releaseId}");
    }
    
    private async void HandleResult(ViewResult<DiscogsCollectionViewModel> result)
    {
        if (result.Success)
            _collectionViewModel = result.Data;
        else
           await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
    }
       
    private Func<ReleaseViewModel, object> _sortBy => x => x.Artist;

    private Func<ReleaseViewModel, object> _groupBy => x => x.Artist;

    // quick filter - filter globally across multiple columns with the same input
    private Func<ReleaseViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Artist.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

}

<style>
    /* Custom styling for making dropdown arrows align to the left */
    .custom-mud-datagrid .mud-table-row .mud-table-cell {
        justify-content: flex-start !important;
        text-align: left !important;
    }
</style>