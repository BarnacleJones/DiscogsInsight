@page "/correctArtistData/{releaseId:int?}"

@using DiscogsInsight.View.Services.Notifications
@using DiscogsInsight.View.Services.Releases
@using DiscogsInsight.ViewModels.DataCorrectionViewModels
@using DiscogsInsight.ViewModels.Results
@inject UserNotificationService UserNotificationService
@inject ReleaseViewService ReleaseViewService

@if (_potentialArtists is null)
{
    <LoadingComponent />
}
else
{
    <MudText>Please use the select list to choose the correct artist</MudText>
    <MudSelect T="string" Label="Correct Artist" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" ValueChanged="HandleArtistSelection">
        @foreach (var item in _potentialArtists)
        {        
            <MudSelectItem Value="item.CorrectArtistMusicBrainzId">@item.ArtistName @item.Tags</MudSelectItem>
        }
    </MudSelect>
    <MudText>@_selectedArtist</MudText>
    //once one is chosen, correct the information and when that is success redirect to the release for that artist
}

@code
{
    [Parameter]
    public int? releaseId { get; set; }

    private List<CorrectArtistDataViewModel>? _potentialArtists;
    private string? _selectedArtist;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _potentialArtists = new List<CorrectArtistDataViewModel> 
            {
                new CorrectArtistDataViewModel { ArtistName = "Test", CorrectArtistMusicBrainzId = "asdf", Tags = "smooth" },
                new CorrectArtistDataViewModel { ArtistName = "Test2", CorrectArtistMusicBrainzId = "as2df", Tags = "sm2ooth" } 
            };
            StateHasChanged();
            //HandleResult(await ReleaseViewService.GetPossibleArtistsBasedOnDiscogsReleaseId(releaseId));
        }
        catch (Exception ex)
        {
            await UserNotificationService.DisplayNotification("Error", $"{ex.Message}", "OK", "Cancel");
        }
    }

    private async Task HandleArtistSelection(string CorrectArtistMusicBrainzId)
    {
        var a = await ReleaseViewService.UpdateArtistWithCorrectMusicBrainzId(releaseId, CorrectArtistMusicBrainzId);
    }

    // private async void HandleResult(ViewResult<CorrectArtistDataViewModel> result)
    // {
    //     if (result.Success)
    //     {
    //         _potentialArtists = result.Data;
    //         StateHasChanged();
    //     }
    //     else
    //     {
    //         await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
    //     }
    // }
    

   
}
