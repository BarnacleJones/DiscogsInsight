@page "/"
@using DiscogsInsight.View.Services.Collection
@using DiscogsInsight.View.Services.Releases
@using DiscogsInsight.ViewModels.EntityViewModels
@using DiscogsInsight.DataAccess.Services
@using DiscogsInsight.View.Services.Notifications
@using DiscogsInsight.ViewModels.Results
@inject UserNotificationService UserNotificationService
@inject ReleaseViewService ReleaseViewService
@inject CollectionViewService CollectionViewService
@inject NavigationManager NavigationManager
<div class="welcome-container">
        
    @if (_hasKey)
    {
        @* <a class="btn btn-primary" href="@NavigationManager.ToAbsoluteUri("/collectionGrid")">Explore Collection</a> *@
        <RadzenText Text="Discogs Insight" TextStyle="TextStyle.DisplayH4" />
        <br />           

        <div class="rz-p-sm-12">
            <RadzenAccordion>
                <Items>
                    <RadzenAccordionItem Text="Random Release" Icon="refresh" CollapseTitle="Collapse random." Selected="true"
                                         ExpandTitle="Expand random." CollapseAriaLabel="Collapse the random panel." class="rz-bg-dark"
                                         ExpandAriaLabel="Expand the random panel.">
                        @if (_randomRelease != null)
                        {
                            <ReleaseComponent Release="@_randomRelease" />
                        }
                    </RadzenAccordionItem>
                    <RadzenAccordionItem Text="Latest 5 Releases" Icon="pageview" CollapseTitle="Collapse Latest 5 Releases."
                                         ExpandTitle="Expand Latest 5 Releases." CollapseAriaLabel="Collapse the Latest 5 Releases details."
                                         ExpandAriaLabel="Expand the Latest 5 Releases details.">
                        @if (_latestReleases != null)
                        {
                            foreach (var item in _latestReleases)
                            {
                                <ReleaseComponent Release="@item" />
                            }
                        }
                    </RadzenAccordionItem>
                </Items>
            </RadzenAccordion>
        </div>
    }
    else
    {
        <label for="userNameInput">Enter Discogs Username: </label>
        <input type="text" @bind="discogsUsername">
        <br />
        <button class="btn btn-primary"   @onclick="handleButtonClick">Store Username</button>
        <hr />
        <p>This app will fetch your Discogs collection (currently up to 1000 items) using your username</p>
        <p>The data will be stored locally and used for gaining statistical insights into your collection.</p>
    }
</div>

@code{
    private static bool _hasKey { get; set; }
    private string discogsUsername = string.Empty;
    private ReleaseViewModel? _randomRelease;
    private List<ReleaseViewModel>? _latestReleases;

    public void handleButtonClick()
    {
        Preferences.Default.Set("discogsUsername", discogsUsername);
        _hasKey = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _hasKey = Preferences.Default.ContainsKey("discogsUsername");
        if (_hasKey)
        {
            var ensureCollectionIsSeeded = await CollectionViewService.GetCollection();
            HandleRandomResult(await ReleaseViewService.GetRandomRelease());
            HandleNewestReleaseResult(await ReleaseViewService.GetNewestReleases());
        }
    }

    private async void HandleRandomResult(ViewResult<ReleaseViewModel> result)
    {
        if (result.Success)
        {
            _randomRelease = result.Data;
        }
        else
        {
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
        }
    }

    private async void HandleNewestReleaseResult(ViewResult<List<ReleaseViewModel>> result)
    {
        if (result.Success)
        {
            _latestReleases = result.Data;
        }
        else
        {
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
        }
    }
}