@page "/"
@using DiscogsInsight.View.Services.Collection
@using DiscogsInsight.View.Services.Releases
@using DiscogsInsight.ViewModels
@using DiscogsInsight.ViewModels.EntityViewModels
@using DiscogsInsight.DataAccess.Services
@using DiscogsInsight.View.Services.Notifications
@using DiscogsInsight.ViewModels.Results
@inject UserNotificationService UserNotificationService
@inject ReleaseViewService ReleaseViewService
@inject CollectionStatisticsViewService CollectionStatisticsViewService
@inject CollectionViewService CollectionViewService
@inject NavigationManager NavigationManager

        
    @if (_hasKey)
    {
        @if (_randomRelease != null)
        {
            <MudStack AlignItems="MudBlazor.AlignItems.Center" Elevation="0">
                <MudButton OnClick="OnRandomExpandCollapseClick" Color="Color.Secondary">@(_randomExpanded ? "Hide Random Release" : "Show Random Release")</MudButton>
                <MudCollapse Expanded="_randomExpanded">
                    <ReleaseComponent Release="@_randomRelease" ShowRefreshRelease="true" OnButtonClick="RefreshRandom" />
                </MudCollapse>
                <MudContainer>
                    <ReleasesWithoutTracksComponent ReleaseWithAndWithoutTotals=@(CalculateDonutValues()) />
                    <TimelineBarGraphComponent CollectionStats="@_collectionStats"/>
                </MudContainer>
            </MudStack>
        }
        else
        {
            <LoadingComponent />
        }
}
else
{
    <EnterUsernameComponent OnStoreUsernameClick="handleButtonClick" />   
}


@code{
    private static bool _hasKey { get; set; }
    private bool _randomExpanded { get; set; }
    private string discogsUsername = string.Empty;
    private ReleaseViewModel? _randomRelease;
    private CollectionStatsViewModel? _collectionStats;

    public void handleButtonClick()
    {
        Preferences.Default.Set("discogsUsername", discogsUsername);
        _hasKey = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _hasKey = Preferences.Default.ContainsKey("discogsUsername");
        if (_hasKey)
        {
            var ensureCollectionIsSeeded = await CollectionViewService.GetCollection();
            HandleRandomResult(await ReleaseViewService.GetRandomRelease());
            HandleStatisticsResult(await CollectionStatisticsViewService.GetHomePageStatistics());
        }
    }

    private async void HandleRandomResult(ViewResult<ReleaseViewModel> result)
    {
        if (result.Success)
            _randomRelease = result.Data;        
        else
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");       
    }

    private async void HandleStatisticsResult(ViewResult<CollectionStatsViewModel> result)
    {
        if (result.Success)
            _collectionStats = result.Data;
        else
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
    }

    private double[] CalculateDonutValues()
    {
        var totalInCollectionWithoutTracks = _collectionStats.AlbumsInCollectionWithoutTracksInfo;
        var totalInCollectionWithTracks = _collectionStats.AlbumsInCollection - _collectionStats.AlbumsInCollectionWithoutTracksInfo;
        return new double[] { totalInCollectionWithTracks, totalInCollectionWithoutTracks };

    }

    public async Task RefreshRandom()
    {
        HandleRandomResult(await ReleaseViewService.GetRandomRelease());
        StateHasChanged();
    }

    private void OnRandomExpandCollapseClick() {
        _randomExpanded = !_randomExpanded;
    }
}