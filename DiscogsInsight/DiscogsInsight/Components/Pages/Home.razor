@page "/"
@using DiscogsInsight.Service.Collection
@using DiscogsInsight.Service.Notifications
@using DiscogsInsight.Service.Releases
@using DiscogsInsight.Service.Settings
@using DiscogsInsight.Service.Tracks
@using DiscogsInsight.Service.Models
@using DiscogsInsight.Service.Models.Collection
@using DiscogsInsight.Service.Models.EntityViewModels
@using DiscogsInsight.Service.Models.Insights
@using DiscogsInsight.Service.Models.Results
@inject UserNotificationService UserNotificationService
@inject ReleaseViewService ReleaseViewService
@inject SettingsViewService SettingsViewService
@inject TracksViewService TracksViewService
@inject CollectionStatisticsViewService CollectionStatisticsViewService
@inject CollectionViewService CollectionViewService
@inject NavigationManager NavigationManager

        
    @if (_hasKey)
    {
        @if (_randomRelease != null && _collectionStats != null)
        {
            <MudStack AlignItems="MudBlazor.AlignItems.Center" Elevation="0">
                <MudButton OnClick="OnRandomExpandCollapseClick" Color="Color.Secondary">@(_randomExpanded ? "Hide Random Release" : "Show Random Release")</MudButton>
                <MudButton OnClick="OnRandomTrackExpandCollapseClick" Color="Color.Secondary">@(_randomTrackExpanded ? "Hide Random Track" : "Show Random Track")</MudButton>
                <MudCollapse Expanded="_randomExpanded">
                    <ReleaseComponent Release="@_randomRelease" ShowRefreshRelease="true" OnButtonClick="RefreshRandom" />
                </MudCollapse>
                <MudCollapse Expanded="_randomTrackExpanded">
                    <TrackComponent Track="@_randomTrack" ShowRefreshTrack="true" OnButtonClick="RefreshRandomTrack" />
                </MudCollapse>
                <MudContainer>
                @if (_collectionStats.AlbumsInCollectionWithoutTracksInfo > 0)
                {
                    <ReleasesWithoutTracksComponent ReleaseWithAndWithoutTotals=@(CalculateDonutValues()) />            
                }
                <TimelineBarGraphComponent CollectionStats="@_collectionStats"/>
                </MudContainer>
            </MudStack>
        }
        else
        {
            <LoadingComponent />
        }
}
else
{
    <EnterUsernameComponent OnStoreUsernameClick="handleButtonClick" />   
}


@code{
    private static bool _hasKey { get; set; }
    private bool _randomExpanded { get; set; }
    private bool _randomTrackExpanded { get; set; }
    private string discogsUsername = string.Empty;
    private ReleaseViewModel? _randomRelease;
    private TracksItemViewModel? _randomTrack;
    private CollectionStatsViewModel? _collectionStats;

    public async void handleButtonClick()
    {
        var a = await SettingsViewService.UpdateDiscogsUsername(discogsUsername);
        _hasKey = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _hasKey = SettingsViewService.HasSavedDiscogsUsername();
        if (_hasKey)
        {
            var ensureCollectionIsSeeded = await CollectionViewService.GetCollection();
            HandleRandomResult(await ReleaseViewService.GetRandomRelease());
            HandleRandomTrackResult(await TracksViewService.GetRandomTrack());
            HandleStatisticsResult(await CollectionStatisticsViewService.GetHomePageStatistics());
        }
    }

    private async void HandleRandomResult(ViewResult<ReleaseViewModel> result)
    {
        if (result.Success)
            _randomRelease = result.Data;        
        else
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");       
    }

    private async void HandleRandomTrackResult(ViewResult<TracksItemViewModel> result)
    {
        if (result.Success)
            _randomTrack = result.Data;        
        else
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");       
    }

    private async void HandleStatisticsResult(ViewResult<CollectionStatsViewModel> result)
    {
        if (result.Success)
            _collectionStats = result.Data;
        else
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
    }

    private double[] CalculateDonutValues()
    {
        var totalInCollectionWithoutTracks = _collectionStats?.AlbumsInCollectionWithoutTracksInfo;
        var totalInCollectionWithTracks = _collectionStats?.AlbumsInCollection - _collectionStats?.AlbumsInCollectionWithoutTracksInfo;
        if (totalInCollectionWithoutTracks != null && totalInCollectionWithTracks != null)
        {
            return new double[] { totalInCollectionWithTracks.Value, totalInCollectionWithoutTracks.Value };            
        }
        return new double[0];

    }

    public async Task RefreshRandom()
    {
        HandleRandomResult(await ReleaseViewService.GetRandomRelease());
        StateHasChanged();
    }
    public async Task RefreshRandomTrack()
    {
        HandleRandomTrackResult(await TracksViewService.GetRandomTrack());
        StateHasChanged();
    }

    private void OnRandomExpandCollapseClick() {
        _randomExpanded = !_randomExpanded;
    }

    private void OnRandomTrackExpandCollapseClick()
    {
        _randomTrackExpanded = !_randomTrackExpanded;
    }
}