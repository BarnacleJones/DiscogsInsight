@page "/settings"
@using DiscogsInsight.Service.Models.Results
@inject NavigationManager NavigationManager
@inject SettingsViewService SettingsViewService
@inject UserNotificationService UserNotificationService

<MudStack AlignItems="MudBlazor.AlignItems.Start">
    <MudText Typo="Typo.h6">Settings <MudIcon Icon="@Icons.Material.Filled.Settings"></MudIcon></MudText>
    <MudSpacer />
    <MudStack Row="true">
        <MudTextField @bind-Value="discogsUsername" Label="Discogs Username" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>   
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" OnClick="@SaveUsername"  Size="Size.Small">Save Username</MudButton>
    </MudStack>
    <MudSpacer />
    <MudStack Row="true">
        <MudText Typo="Typo.caption">Syncronises collection from Discogs</MudText>
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="@UpdateApiData" Size="Size.Small">Update Collection Data</MudButton>
    </MudStack>
    <MudStack Row="true">  
        <MudText Typo="Typo.caption">WARNING: Purges All Data</MudText>
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Warning" OnClick="@PurgeDatabase" Size="Size.Small">Purge Database</MudButton>
    </MudStack>
    <MudStack Row="true">  
        <MudText Typo="Typo.caption">Initial Exclusion Period (In Days) For Releases Added Over Time</MudText>
        <MudText Typo="Typo.caption">If you added many items to collection as part of an initial cataloguing, you can exclude that here.</MudText>
        <MudTextField @bind-Value="releaseAddedOverTimeInitialExclusionPeriodInDays" Label="Releases added over time" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Girl" Color="Color.Warning" OnClick="@SaveReleaseAddedOverTimeInt" Size="Size.Small">Save Exclusion Period</MudButton>
    </MudStack>
    <MudSpacer />
    @*LAST FM SETTINGS*@
    <MudText Typo="Typo.h6">Last Fm Settings <MudIcon Icon="@Icons.Material.Filled.QueueMusic"></MudIcon></MudText>
    <MudForm @ref="form" @bind-IsValid="@success" Style="width:max-content">
        <MudTextField T="string" @bind-Value="lastFmApiKey" Label="Last Fm API Key" Required="true" RequiredError="API Key is required!" />
        <MudTextField T="string" @bind-Value="lastFmApiSecret" Label="Last Fm API Secret" Required="true" RequiredError="API Secret is required!" />
        <MudTextField T="string" @bind-Value="lastFmUsername" Label="Username" Required="true" RequiredError="Username is required!" />
        <MudTextField T="string" @bind-Value="lastFmPassword" Label="Password" InputType="InputType.Password" />
        <div class="d-flex align-center justify-space-between">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="@SaveLastFmSettings">Save</MudButton>
        </div>
    </MudForm>
</MudStack>


@code {
    private string discogsUsername = string.Empty;

    //last fm
    bool success;
    MudForm? form;
    private string lastFmApiKey = string.Empty;
    private string lastFmApiSecret = string.Empty;
    private string lastFmUsername = string.Empty;
    private string lastFmPassword = string.Empty;
    private string releaseAddedOverTimeInitialExclusionPeriodInDays = string.Empty;



    public async void SaveUsername()
    {
        HandleResult(await SettingsViewService.UpdateDiscogsUsername(discogsUsername), "Saved Username - Restart the app");
    }

    public async void SaveReleaseAddedOverTimeInt()
    {
        HandleResult(await SettingsViewService.UpdateReleaseAddedOverTimeInitialExclusionPeriodInDays(releaseAddedOverTimeInitialExclusionPeriodInDays), "Saved Exclusion Period.");
    }

    public async Task UpdateApiData()
    {
        HandleResult(await SettingsViewService.UpdateCollection(), "Updated Collection");
    }
    public async Task PurgeDatabase()
    {
        HandleResult(await SettingsViewService.PurgeEntireDatabase(), "Purged Database");
    }

    public async void SaveLastFmSettings()
    {
        HandleResult(await SettingsViewService.SaveUpdateLastFmSettings(lastFmUsername, lastFmPassword, lastFmApiKey, lastFmApiSecret), "Saved Last Fm Settings - Restart the app");
    }



    protected override void OnInitialized()
    {
        discogsUsername = SettingsViewService.GetDiscogsUsername();
        lastFmApiKey = SettingsViewService.GetLastFmApiKey();
        lastFmApiSecret = SettingsViewService.GetLastFmApiSecret();
        lastFmUsername = SettingsViewService.GetLastFmUsername();
        lastFmPassword = SettingsViewService.GetLastFmPassword();
        releaseAddedOverTimeInitialExclusionPeriodInDays = SettingsViewService.GetReleaseAddedOverTimeInitialExclusionPeriodInDays();

    }

    private async void HandleResult(ViewResult<bool> result, string successMessage)
    {
        if (result.Success)
        {
            await UserNotificationService.DisplayNotification("Success", successMessage, "OK", "Cancel");
        }
        else
        {
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
        }
    }
}