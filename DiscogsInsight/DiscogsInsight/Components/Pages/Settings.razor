@page "/settings"
@using DiscogsInsight.View.Services.Notifications
@using DiscogsInsight.View.Services.Settings
@using DiscogsInsight.ViewModels.Results
@inject NavigationManager NavigationManager
@inject SettingsViewService SettingsViewService
@inject UserNotificationService UserNotificationService

<MudStack AlignItems="MudBlazor.AlignItems.Start">
    <MudText Typo="Typo.h5">Settings <MudIcon Icon="@Icons.Material.Filled.Settings"></MudIcon></MudText>
    <MudSpacer />
    <MudStack Row="true">
        <MudTextField @bind-Value="discogsUsername" Label="Discogs Username" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>   
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" OnClick="@SaveUsername"  Size="Size.Small">Save Username</MudButton>
    </MudStack>
    <MudSpacer />
    <MudStack Row="true">  
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Info" OnClick="@UpdateApiData" Size="Size.Small">Update Collection Data</MudButton>
    </MudStack>
</MudStack>


@code {
    private string discogsUsername = string.Empty;

    public async void SaveUsername()
    {
        HandleResult(await SettingsViewService.UpdateDiscogsUsername(discogsUsername), "Saved Username");
    }

    public async Task UpdateApiData()
    {
        HandleResult(await SettingsViewService.UpdateCollection(), "Updated Collection");
    }

    protected override void OnInitialized()
    {
        discogsUsername = SettingsViewService.GetDiscogsUsername();
    }

    private async void HandleResult(ViewResult<bool> result, string successMessage)
    {
        if (result.Success)
        {
            await UserNotificationService.DisplayNotification("Success", successMessage, "OK", "Cancel");
        }
        else
        {
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
        }
    }
}