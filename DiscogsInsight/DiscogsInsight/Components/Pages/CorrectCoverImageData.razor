@page "/correctCoverImageData/{releaseId:int?}"

@using DiscogsInsight.Service.Models.DataCorrection
@using DiscogsInsight.Service.Models.Results
@inject UserNotificationService UserNotificationService
@inject NavigationManager NavigationManager
@inject ReleaseViewService ReleaseViewService

@if (_potentialReleases is null)
{
    <LoadingComponent />
}
else
{
    <MudText>Please use the select list to choose the correct release</MudText>
    <MudSelect T="string" Label="Correct Release" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" ValueChanged="HandleReleaseSelection">
        @foreach (var item in _potentialReleases)
        {
            <MudSelectItem Value="item.MusicBrainzReleaseId">@item.Date @item.Title - @item.Status</MudSelectItem>
        }
    </MudSelect>
}

@code
{
    [Parameter]
    public int? releaseId { get; set; }
    private List<CorrectReleaseDataViewModel>? _potentialReleases;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HandleResult(await ReleaseViewService.GetPossibleReleasesBasedOnDiscogsReleaseId(releaseId));
        }
        catch (Exception ex)
        {
            await UserNotificationService.DisplayNotification("Error", $"{ex.Message}", "OK", "Cancel");
        }
    }

    private async void HandleResult(ViewResult<List<CorrectReleaseDataViewModel>> result)
    {
        if (result.Success)
        {
            _potentialReleases = result.Data;
            StateHasChanged();
        }
        else
        {
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
        }
    }
    private async Task HandleReleaseSelection(string CorrectArtistMusicBrainzId)
    {
        var success = await ReleaseViewService.UpdateReleaseWithCorrectMusicBrainzId(releaseId, CorrectArtistMusicBrainzId);
        if (success)
        {
            NavigationManager.NavigateTo($"/release/{releaseId}");
        }
        else
        {
            await UserNotificationService.DisplayNotification("Error", $"Error updating artist", "OK", "Cancel");
        }
    }

}
