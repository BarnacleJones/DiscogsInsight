@page "/tracksInsights"
@using DiscogsInsight.View.Services.Collection
@using DiscogsInsight.View.Services.Insights
@using DiscogsInsight.View.Services.Notifications
@using DiscogsInsight.View.Services.Releases
@using DiscogsInsight.View.Services.Tracks
@using DiscogsInsight.ViewModels
@using DiscogsInsight.ViewModels.Insights
@using DiscogsInsight.ViewModels.Results
@inject TracksInsightsViewService TrackInsightsViewService
@inject UserNotificationService UserNotificationService
@inject NavigationManager NavigationManager

        
@if (_tracksInsightsStats != null)
{
    <MudStack AlignItems="MudBlazor.AlignItems.Center" Elevation="0">
        <MudText Typo="Typo.h5">Tracks Insights</MudText>
        <MudSpacer />
        <MudList>
            <MudListItem>
                <MudText Typo="Typo.body2">Average Track Length</MudText>
                <MudSpacer />
                <MudText Typo="Typo.body1">@_tracksInsightsStats.AverageTrackLength</MudText>
            </MudListItem>
            <MudListItem>
                <MudText Typo="Typo.body2">Average Tracks Per Release</MudText>
                <MudSpacer />
                <MudText Typo="Typo.body1">@_tracksInsightsStats.AverageTracksPerRelease</MudText>
            </MudListItem>
        </MudList>
    </MudStack>
}
else
{
    <LoadingComponent />
}

@code{
    private TracksInsightsStatsModel? _tracksInsightsStats;


    protected override async Task OnInitializedAsync()
    {        
        HandleStatisticsResult(await TrackInsightsViewService.GetTracksStatistics());

    }

    private async void HandleStatisticsResult(ViewResult<TracksInsightsStatsModel> result)
    {
        if (result.Success)
            _tracksInsightsStats = result.Data;
        else
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
    }
}