@page "/randomRelease"

@using System.Collections.ObjectModel
@using DiscogsInsight.View.Services.Releases
@using DiscogsInsight.ViewModels
@using DiscogsInsight.Components
@using DiscogsInsight.ViewModels.EntityViewModels
@using DiscogsInsight.View.Services.Notifications
@using DiscogsInsight.ViewModels.Results
@inject UserNotificationService UserNotificationService
@inject ReleaseViewService ReleaseViewService
@inject NavigationManager _navigationManager
@using Radzen

@if (_release is null)
{
    <div class="d-flex justify-content-center">
        <div class="row">
            <div class="col-12">
                <img src="images/loading.svg" />
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <p><em>Loading...</em></p>
            </div>
        </div>
    </div>
}
else
{
    <RadzenText Text="Random" TextStyle="TextStyle.DisplayH4" />
    <RadzenCard>
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="">
            <RadzenColumn Size="12" class="d-flex justify-content-center">
                <RadzenButton Click=@(args => RefreshPage()) Icon="refresh" ButtonStyle="ButtonStyle.Light" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="">
            <RadzenColumn Size="12">
                <ReleaseComponent Release="@_release"/>
            </RadzenColumn>
        </RadzenRow>

    </RadzenCard>

}

@code
{
    private ReleaseViewModel? _release;

    protected override async Task OnInitializedAsync()
    {          
        HandleRandomResult(await ReleaseViewService.GetRandomRelease());        
    }

    public async Task RefreshPage()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

    private async void HandleRandomResult(ViewResult<ReleaseViewModel> result)
    {
        if (result.Success)
        {
            _release = result.Data;
            StateHasChanged();
        }
        else
        {
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
        }
    }

}
