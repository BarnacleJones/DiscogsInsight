@page "/newest"
@using DiscogsInsight.Service.Collection
@using DiscogsInsight.Service.Releases
@using DiscogsInsight.Service.Models.EntityViewModels
@using DiscogsInsight.Service.Notifications
@using DiscogsInsight.Service.Models.Results
@inject UserNotificationService UserNotificationService
@inject ReleaseViewService ReleaseViewService
@inject CollectionViewService CollectionViewService
@inject NavigationManager NavigationManager

        
    @if (_hasKey)
    {

        @if (_latestReleases != null)
        {
            <MudStack AlignItems="MudBlazor.AlignItems.Center">
                <MudText Typo="Typo.h6">Latest In Collection</MudText>
                <MudSpacer />
                <MudCarousel 
                    Class="mud-width-full" 
                    Style="height:180vh" 
                    ShowArrows="true" 
                    ArrowsPosition="Position.Start" 
                    ShowBullets="false" 
                    BulletsPosition="Position.Top" 
                    EnableSwipeGesture="true" 
                    AutoCycle="false" 
                    TData="List<ReleaseViewModel>">
                        @foreach (var item in _latestReleases)
                        {
                            <MudCarouselItem 
                                Transition="Transition.Slide" 
                                Color="@Color.Dark" >                                
                                    <MudSpacer />                               
                                    <ReleaseComponent Release="@item" />
                            </MudCarouselItem>
                        }
                </MudCarousel>
            </MudStack>
        }
        else
        {
            <LoadingComponent />
        }
    }
    else
    {
        <EnterUsernameComponent OnStoreUsernameClick="handleButtonClick" />
    }


@code{
    private static bool _hasKey { get; set; }

    private string discogsUsername = string.Empty;
    public List<ReleaseViewModel>? _latestReleases;

    public void handleButtonClick()
    {
        Preferences.Default.Set("discogsUsername", discogsUsername);
        _hasKey = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _hasKey = Preferences.Default.ContainsKey("discogsUsername");
        if (_hasKey)
        {
            var ensureCollectionIsSeeded = await CollectionViewService.GetCollection();
            HandleNewestReleaseResult(await ReleaseViewService.GetNewestReleases());
        }
    }
    
    private async void HandleNewestReleaseResult(ViewResult<List<ReleaseViewModel>> result)
    {
        if (result.Success)
        {
            _latestReleases = result.Data;
        }
        else
        {
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
        }
    }

}