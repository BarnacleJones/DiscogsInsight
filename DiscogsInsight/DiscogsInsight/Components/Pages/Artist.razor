@page "/artist/{artistId:int?}"

@using System.Collections.ObjectModel
@using DiscogsInsight.ViewModels.EntityViewModels
@using DiscogsInsight.View.Services.Artist
@using DiscogsInsight.ViewModels
@using DiscogsInsight.ViewModels.Results
@using DiscogsInsight.View.Services.Notifications
@inject UserNotificationService UserNotificationService
@inject ArtistViewService ArtistViewService
@inject NavigationManager _navigationManager

@if (_artist is null)
{
    <div class="d-flex justify-content-center">
        <div class="row">
            <div class="col-12">
                <img src="images/loading.svg" />
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <p><em>Loading...</em></p>
            </div>
        </div>
    </div>
}
else
{
<RadzenText TextStyle="TextStyle.H2" TextAlign="TextAlign.Center">Artist</RadzenText>
<RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width: 100%">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4" />
        @* <RadzenImage Path="@order?.Employee?.Photo" Style="width: 100px; height: 100px; border-radius: 50%;" /> *@
        <RadzenStack Gap="0">
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Artist</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1"><b>@(_artist.Artist)</b></RadzenText>
    </RadzenStack>
    <RadzenCard class="rz-background-color-primary-light rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 1rem calc(-1 * var(--rz-card-padding));">
        <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Description</strong></RadzenText>
        <RadzenRow RowGap="0">
            <RadzenColumn SizeSM="12">
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(_artist.ArtistDescription)</b></RadzenText>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
</RadzenCard>

}

@code
{
    [Parameter]
    public int? artistId { get; set; }

    private ArtistViewModel? _artist;

    protected override async Task OnInitializedAsync()
    {
        try
        {            
            HandleResult(await ArtistViewService.GetArtist(artistId));
            HandleResult(await ArtistViewService.GetInitialArtist());

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error", $"An error occurred: {ex.Message}", "OK");
        }
    }

    private async void HandleResult(ViewResult<ArtistViewModel> result)
    {
        if (result.Success)
        {
            _artist = result.Data;
        }
        else
        {
            await UserNotificationService.DisplayNotification("Error", $"{result.ErrorMessage}", "OK", "Cancel");
        }
    }

    private async void HandleResult(bool result)
    {
        if (result)
        {

        }
        else
        {
            await UserNotificationService.DisplayNotification("Error", $"{result}", "OK", "Cancel");
        }
    }
}
