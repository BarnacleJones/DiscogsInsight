@using DiscogsInsight.ViewModels.EntityViewModels
@using DiscogsInsight.ViewModels;
@using Radzen
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            @if (Release.CoverImage != null)
            {
                <MudAvatar Color="Color.Secondary">
                    <MudImage Src="@ConvertByteArrayToImage()"  />
                </MudAvatar>
            }
            else
            {
                <MudAvatar Color="Color.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.MusicNote" />
                </MudAvatar>
            }
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudLink OnClick="@(() => @GoToArtist(Release.DiscogsArtistId))">
                <MudText Typo="Typo.body1">
                    @(Release.Artist)
                </MudText>
            </MudLink>
            <MudText Typo="Typo.body2">
                @(Release.Title)
            </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudStack>
            <MudImage Src="@ConvertByteArrayToImage()" Fluid= "true" ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Fill" />
            <MudButton OnClick="OnInfoExpandCollapseClick">
                <MudIcon Icon="@Icons.Material.Filled.Add" />
                <MudSpacer />
                INFO
            </MudButton>
            <MudDivider />
            <MudCollapse Expanded="_infoExpanded">                
                <MudList Clickable="true">
                    @if (Release.DateAdded.HasValue)
                    {
                        <MudListItem>
                            <MudText Typo="Typo.body2">Date Added</MudText>
                            <MudSpacer />
                            <MudText Typo="Typo.body1">@Release.DateAdded</MudText>                                
                        </MudListItem>                            
                    }
                    @if (!string.IsNullOrWhiteSpace(Release.Year))
                    {
                        <MudListItem>
                            <MudText Typo="Typo.body2">Year</MudText>
                            <MudSpacer />
                            <MudText Typo="Typo.body1">@Release.Year</MudText>
                        </MudListItem>
                    }
                    @if (!string.IsNullOrWhiteSpace(Release.ReleaseCountry))
                    {
                        <MudListItem>
                            <MudText Typo="Typo.body2">Country</MudText>
                            <MudSpacer />
                            <MudText Typo="Typo.body1">@Release.ReleaseCountry</MudText>
                        </MudListItem>
                    }
                    @if (!string.IsNullOrWhiteSpace(Release.Genres))
                    {
                        <MudListItem>
                            <MudText Typo="Typo.body2">Genre(s)</MudText>
                            <MudSpacer />
                            <MudText Typo="Typo.body1">@Release.Genres</MudText>
                        </MudListItem>
                    }
                        
                </MudList>
            </MudCollapse>
        </MudStack>
        @if (Release.Tracks.Any())
        { 
            <MudStack>
            <MudButton OnClick="OnTracksExpandCollapseClick">
                <MudIcon Icon="@Icons.Material.Filled.Add" />
                <MudSpacer />
                Tracks
            </MudButton>
                <MudDivider />
                <MudCollapse Expanded="_tracksExpanded">
                    <MudPaper>
                        <MudList Clickable="false">
                            @foreach (var track in Release.Tracks.OrderBy(x => x.Position).ToList())
                            {
                                if (track is not null)
                                {
                                    <MudListItem Text="@GetTrackString(@track)" Icon="@Icons.Material.Filled.MusicNote" />
                                }
                            }
                        </MudList>
                    </MudPaper>
                </MudCollapse>
            </MudStack>
        }
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
        <MudIconButton Icon="@Icons.Material.Filled.Link" Color="Color.Default" OnClick="@(() => OpenDiscogsReleaseLink(@Release.DiscogsReleaseUrl))" />
    </MudCardActions>
</MudCard>

@code
{
    [Parameter]
    public ReleaseViewModel Release { get; set; }

    bool _infoExpanded = true;
    bool _tracksExpanded = false;

    private void OnTracksExpandCollapseClick()
    {
        _tracksExpanded = !_tracksExpanded;
    }

    private void OnInfoExpandCollapseClick()
    {
        _infoExpanded = !_infoExpanded;
    }

    private void OpenDiscogsReleaseLink(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    string ConvertByteArrayToImage()
    {
        string imageData = "";
        if (Release.CoverImage != null && Release.CoverImage.Length > 0)
        {
            imageData = $"data:image/jpeg;base64,{Convert.ToBase64String(Release.CoverImage)}";
        }
        else
        {
            imageData = "images/album.png";
        }
        return imageData;
    }

    void GoToArtist(int? discogsArtistId)
    {
        NavigationManager.NavigateTo("/artist/" + discogsArtistId);
    }

    void GoToRelease(int? releaseId)
    {
        NavigationManager.NavigateTo($"/release/{releaseId}");
    }

    string GetTrackString(TrackViewModel track)
    {
        return $"{(string.IsNullOrWhiteSpace(track.Position) ? "" : track.Position + " - ")}{(string.IsNullOrWhiteSpace(track.Title) ? "" : track.Title)}{(string.IsNullOrWhiteSpace(track.Duration) ? "" : " - " + track.Duration)}";
    }
}
