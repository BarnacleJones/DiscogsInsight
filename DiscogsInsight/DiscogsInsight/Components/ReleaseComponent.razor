@using DiscogsInsight.ViewModels.EntityViewModels
@using DiscogsInsight.ViewModels;
@using Radzen
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@* <RadzenCard Class="rz-my-12 rz-mx-auto rz-background-color-base-400" Style="max-width: 100%">
    <RadzenStack Orientation="Radzen.Orientation.Vertical" Gap="1rem" Class="rz-p-4">  
        <RadzenStack Gap="0" class="rz-display-flex rz-justify-content-center">
            @if (Release.CoverImage != null)
            {
                <RadzenImage Style="max-width: 60vw; height: auto;" class="rz-justify-self-center" Path="@ConvertByteArrayToImage()" />
            }
        </RadzenStack>
        <RadzenStack Gap="0" class="rz-display-flex rz-justify-content-start">
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Artist</RadzenText>
            <RadzenLink TextStyle="TextStyle.Body1" onclick=@(() => @GoToArtist(Release.DiscogsArtistId))><b>@(Release.Artist)</b></RadzenLink>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Album</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" onclick=@(() => @GoToRelease(Release.DiscogsReleaseId))><b>@Release.Title</b></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Date Added</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@(Release.DateAdded)</b></RadzenText>
            @if (Release.ReleaseCountry != null)
            {
                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Release Country</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1"><b>@(Release.ReleaseCountry)</b></RadzenText>                
            }
        </RadzenStack>
    </RadzenStack>
    <RadzenAccordion class="">
        <Items>
            <RadzenAccordionItem Text="Tracklist" Icon="list" CollapseTitle="Collapse Tracklist."
             ExpandTitle="Expand Tracklist." CollapseAriaLabel="Collapse the Tracklist."
             ExpandAriaLabel="Expand the Tracklist.">
                <ul>
                @foreach (var track in Release.Tracks.OrderBy(x => x.Position).ToList())
                {
                    if (track is not null)
                    {
                            <li style="list-style:none">@GetTrackString(@track)</li>
                    }
                }
                </ul>
            </RadzenAccordionItem>            
        </Items>        
    </RadzenAccordion>
</RadzenCard> *@


@* df *@
<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            @if (Release.CoverImage != null)
            {
                <MudAvatar Color="Color.Secondary">
                    <MudImage Src="@ConvertByteArrayToImage()"  />
                </MudAvatar>
            }
            else
            {
                <MudAvatar Color="Color.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.MusicNote" />
                </MudAvatar>
            }
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">
                @* <MudLink ="@(() => @GoToArtist(Release.DiscogsArtistId))" /> *@
                @(Release.Artist)
            </MudText>
            <MudText Typo="Typo.body2">
                @* <MudLink onclick="@(() => @GoToRelease(Release.DiscogsReleaseId))" /> *@
                @(Release.Title)
            </MudText>
        </CardHeaderContent>
       @*  <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
        </CardHeaderActions> *@
    </MudCardHeader>
    @* <MudPaper Height="400px" Width="100%"> *@
        @* <MudContainer Fixed="true"> *@
            <MudImage Src="@ConvertByteArrayToImage()" Fluid= "true" ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Fill" />
        @* </MudContainer> *@
    @* </MudPaper> *@
    <MudCardContent>
        <MudText Typo="Typo.body2">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
        <MudIconButton Icon="@Icons.Material.Filled.Link" Color="Color.Default" OnClick="@(() => OpenLink(@Release.DiscogsReleaseUrl))" />

    </MudCardActions>
</MudCard>

@code
{
    [Parameter]
    public ReleaseViewModel Release { get; set; }

    private void OpenLink(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    string ConvertByteArrayToImage()
    {
        string imageData = "";
        if (Release.CoverImage != null && Release.CoverImage.Length > 0)
        {
            imageData = $"data:image/jpeg;base64,{Convert.ToBase64String(Release.CoverImage)}";
        }
        else
        {
            imageData = "images/album.png";
        }
        return imageData;
    }

    void GoToArtist(int? discogsArtistId)
    {
        NavigationManager.NavigateTo("/artist/" + discogsArtistId);
    }

    void GoToRelease(int? releaseId)
    {
        NavigationManager.NavigateTo($"/release/{releaseId}");
    }

    string GetTrackString(TrackViewModel track)
    {
        return $"{(string.IsNullOrWhiteSpace(track.Position) ? "" : track.Position + " - ")}{(string.IsNullOrWhiteSpace(track.Title) ? "" : track.Title)}{(string.IsNullOrWhiteSpace(track.Duration) ? "" : " - " + track.Duration)}";
    }
}
