@using DiscogsInsight.ViewModels.EntityViewModels
@using DiscogsInsight.ViewModels;
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IBrowserViewportService ViewportService

<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>            
            <MudAvatar Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.MusicNote" />
            </MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>            
                <MudText Typo="Typo.body1">
                    @(Artist.Artist)
                </MudText>
                @if (!string.IsNullOrEmpty(Artist.StartYear))
                {
                    <MudText Typo="Typo.body2">
                    @(Artist.StartYear) - @(Artist.EndYear ?? "")
                    </MudText>
                }
        </CardHeaderContent>
        <CardHeaderActions>
            @if (ShowRefreshArtist == true)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="RefreshCard" Color="Color.Default" />
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudStack>
            <MudButton OnClick="OnInfoExpandCollapseClick">
                @if (_infoExpanded)
                {
                    <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowUp" />
                    
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" />
                }
                <MudSpacer />
                INFO
            </MudButton>
            <MudDivider />
            <MudCollapse Expanded="_infoExpanded">                
                <MudList Clickable="true">
                    @if (!string.IsNullOrEmpty(Artist.Country))
                    {
                        <MudListItem>
                            <MudText Typo="Typo.body2">Country</MudText>
                            <MudSpacer />
                            <MudText Typo="Typo.body1">@Artist.Country</MudText>                                
                        </MudListItem>                            
                    }
                    @if (!string.IsNullOrEmpty(Artist.City))
                    {
                        <MudListItem>
                            <MudText Typo="Typo.body2">City</MudText>
                            <MudSpacer />
                            <MudText Typo="Typo.body1">@Artist.City</MudText>
                        </MudListItem>
                    }
                    @if (!string.IsNullOrEmpty(Artist.StartYear))
                    {
                        <MudListItem>
                            <MudText Typo="Typo.body2">Start Year</MudText>
                            <MudSpacer />
                            <MudText Typo="Typo.body1">@Artist.StartYear</MudText>
                        </MudListItem>
                    }
                        
                </MudList>
            </MudCollapse>
        </MudStack>  
        @if (!string.IsNullOrWhiteSpace(Artist.ArtistDescription))
        {
            <MudStack>
            <MudButton OnClick="OnDescriptionExpandCollapseClick">
                    @if (_descriptionExpanded)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowUp" />

                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" />
                    }
                <MudSpacer />
                Description
            </MudButton>
                <MudDivider />
                <MudCollapse Expanded="_descriptionExpanded">
                    <MudText Typo="Typo.body1">@Artist.ArtistDescription</MudText>
                </MudCollapse>
            </MudStack>            
        }
        @if (Artist.ReleasesInCollection.Any())
        {
            <MudStack>
                <MudButton OnClick="OnCollectionReleasesExpandCollapseClick">
                    @if (_collectionReleasesExpanded)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowUp" />

                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" />
                    }
                    <MudSpacer />
                    Releases in your collection
                </MudButton>
                <MudDivider />
                <MudCollapse Expanded="_collectionReleasesExpanded">
                    @foreach (var release in Artist.ReleasesInCollection)
                    {
                        if (release != null)
                        {
                            <ReleaseComponent Release="release" ShowRefreshRelease="false" />
                        }
                    }
                </MudCollapse>
            </MudStack>
        }
        @if (Artist.Tags.Any())
        {
            <MudStack>
                <MudButton OnClick="OnTagsExpandCollapseClick">
                    @if (_tagsExpanded)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowUp" />

                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" />
                    }
                    <MudSpacer />
                    Artist Tags
                </MudButton>
                <MudDivider />
                <MudCollapse Expanded="_tagsExpanded">
                        <MudList Clickable="false">
                            @foreach (var tag in Artist.Tags)
                            {
                                if (tag is not null)
                                {
                                    <MudListItem Text="@tag" Icon="@Icons.Material.Filled.Tag" />
                                }
                            }
                        </MudList>
                </MudCollapse>
            </MudStack>
        }
        @if (Artist.ArtistsReleases.Any())
        {
            <MudStack>
                <MudButton OnClick="OnReleasesExpandCollapseClick">
                    @if (_releasesExpanded)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowUp" />

                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" />
                    }
                    <MudSpacer />
                    Artist Releases
                </MudButton>
                <MudDivider />
                <MudCollapse Expanded="_releasesExpanded">
                        <MudTreeView T="string">
                            @foreach (var releaseGroup in Artist.ArtistsReleases)
                            {
                                <MudTreeViewItem Value="@releaseGroup.Status">
                                    @foreach (var release in releaseGroup.Releases)
                                    {
                                        var title = $"{release.Title} - {release.Year}";
                                        <MudTreeViewItem Value="title" />                                
                                    }
                                </MudTreeViewItem>                                    
                            }
                        </MudTreeView>
                </MudCollapse>
            </MudStack>
        }
    </MudCardContent>
</MudCard>

@code
{
    [Parameter]
    public ArtistViewModel Artist { get; set; }
    [Parameter]
    public bool? ShowRefreshArtist { get; set; } = false;
    [Parameter]
    public EventCallback OnButtonClick { get; set; }

    private bool _infoExpanded = true;
    private bool _tagsExpanded = false;
    private bool _releasesExpanded = false;
    private bool _collectionReleasesExpanded = false;
    private bool _descriptionExpanded = false;
    
    private async Task RefreshCard()
    {
        if (OnButtonClick.HasDelegate)
        {
            await OnButtonClick.InvokeAsync(null);
        }
    }
    private void OnDescriptionExpandCollapseClick()
    {
        _descriptionExpanded = !_descriptionExpanded;
    }
    private void OnInfoExpandCollapseClick()
    {
        _infoExpanded = !_infoExpanded;
    }
    private void OnTagsExpandCollapseClick()
    {
        _tagsExpanded = !_tagsExpanded;
    }
    private void OnCollectionReleasesExpandCollapseClick()
    {
        _collectionReleasesExpanded = !_collectionReleasesExpanded;
    }
    private void OnReleasesExpandCollapseClick()
    {
        _releasesExpanded = !_releasesExpanded;
    }
}